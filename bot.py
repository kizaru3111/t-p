import os
import json
import uuid
import asyncio
import logging
from dotenv import load_dotenv
from pathlib import Path

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
os.makedirs('/tmp/logs', exist_ok=True)
os.makedirs('/tmp/uploads', exist_ok=True)
os.makedirs('/tmp/patches', exist_ok=True)

# Aiogram imports
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.enums import ContentType
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

# Local imports
from pdf_editor import PatchExtractor, coordinates

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ç—á–µ–π
async def ensure_patches_exist(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—á–µ–π –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        from config_loader import Config
        config = Config().get_config()
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PatchExtractor...")
        extractor = PatchExtractor(source_pdf_path=config['paths']['source_pdf'])
        patches_dir = config['paths']['patches_dir']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—á–µ–π
        existing_patches = os.listdir(patches_dir) if os.path.exists(patches_dir) else []
        required_patches = [f"patch_{text}.pdf" for text in coordinates.keys()]
        missing_patches = [patch for patch in required_patches if patch not in existing_patches]
        
        if missing_patches:
            logger.info(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {len(missing_patches)} –ø–∞—Ç—á–µ–π. –°–æ–∑–¥–∞—ë–º...")
            logger.info(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—á–∏: {', '.join(missing_patches)}")
            extractor.extract_patches()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
            created_patches = [p for p in missing_patches if os.path.exists(os.path.join(patches_dir, p))]
            failed_patches = [p for p in missing_patches if not os.path.exists(os.path.join(patches_dir, p))]
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –ø–∞—Ç—á–µ–π: {len(created_patches)}")
            if failed_patches:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ç—á–∏: {', '.join(failed_patches)}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ç—á–µ–π: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ç—á–µ–π
async def periodic_patches_update(bot):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ç—á–∏"""
    while True:
        await ensure_patches_exist(bot)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        await asyncio.sleep(6 * 60 * 60)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/tmp/logs/bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

UPLOAD_DIR = '/tmp/uploads'
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB

bot = Bot(token=TOKEN)
dp = Dispatcher()

class PDFData(StatesGroup):
    selecting_fields = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–π
    waiting_for_input = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    waiting_for_pdf = State()    # –û–∂–∏–¥–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞

# –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–ª–µ–π
FIELDS = {
    'name': '–ò–º—è',
    'surname': '–§–∞–º–∏–ª–∏—è',
    'patronymic': '–û—Ç—á–µ—Å—Ç–≤–æ',
    'iin': '–ò–ò–ù',
    'date': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
    'city': '–ì–æ—Ä–æ–¥',
    'nationality': '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
    'issuer': '–û—Ä–≥–∞–Ω –≤—ã–¥–∞—á–∏'
}

def get_fields_keyboard(state_data: dict = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—è–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    for field_id, field_name in FIELDS.items():
        if state_data is None or field_id not in state_data:
            builder.add(InlineKeyboardButton(text=field_name, callback_data=f"field_{field_id}"))
            
    # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    builder.add(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done"))
    builder.add(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart"))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    builder.adjust(2)
    return builder.as_markup()

@dp.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_fields_keyboard()
    )
    await state.set_state(PDFData.selecting_fields)

@dp.callback_query(lambda c: c.data == "restart", PDFData.selecting_fields)
async def process_restart(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_fields_keyboard()
    )
    await state.set_state(PDFData.selecting_fields)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith('field_'), PDFData.selecting_fields)
async def process_field_selection(callback: types.CallbackQuery, state: FSMContext):
    field_id = callback.data.replace('field_', '')
    field_name = FIELDS[field_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ
    await state.update_data(current_field=field_id)
    await state.set_state(PDFData.waiting_for_input)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    await callback.message.edit_text(f"–£–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {await get_changed_fields_text(state)}")
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ {field_name.lower()}:")
    await callback.answer()

async def get_changed_fields_text(state: FSMContext) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π"""
    data = await state.get_data()
    changed = []
    for field_id, value in data.items():
        if field_id in FIELDS:
            changed.append(f"‚úÖ {FIELDS[field_id]}: {value}")
    return "\n".join(changed) if changed else "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ"

@dp.message(PDFData.waiting_for_input)
async def process_field_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_field = data.get('current_field')
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ò–ò–ù
    if current_field == 'iin':
        if not message.text or not message.text.isdigit() or len(message.text) != 12:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –ò–ò–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä.\n\n"
                "‚ÑπÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ò–ò–ù (12 —Ü–∏—Ñ—Ä):\n"
                "–ü–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä - —ç—Ç–æ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
                "1Ô∏è‚É£2Ô∏è‚É£ - –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ü–∏—Ñ—Ä—ã)\n"
                "3Ô∏è‚É£4Ô∏è‚É£ - –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è (01-12)\n"
                "5Ô∏è‚É£6Ô∏è‚É£ - –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è (01-31)\n\n"
                "üìù –ü—Ä–∏–º–µ—Ä:\n"
                "–î–ª—è —á–µ–ª–æ–≤–µ–∫–∞, —Ä–æ–¥–∏–≤—à–µ–≥–æ—Å—è 15 –º–∞—Ä—Ç–∞ 1990 –≥–æ–¥–∞:\n"
                "–ü–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä –ò–ò–ù –±—É–¥—É—Ç: 900315\n"
                "(90 - –≥–æ–¥, 03 - –º–∞—Ä—Ç, 15 - –¥–µ–Ω—å)\n\n"
                "‚ö†Ô∏è –í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ò–ù –ø–æ–≤—Ç–æ—Ä–Ω–æ (–≤—Å–µ 12 —Ü–∏—Ñ—Ä):"
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã –≤ –ò–ò–ù
        year = int(message.text[0:2])
        month = int(message.text[2:4])
        day = int(message.text[4:6])
        
        if month < 1 or month > 12 or day < 1 or day > 31:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤ –ò–ò–ù!\n\n"
                "‚ÑπÔ∏è –í –≤–∞—à–µ–º –ò–ò–ù:\n"
                f"‚Ä¢ –ü–µ—Ä–≤—ã–µ 2 —Ü–∏—Ñ—Ä—ã (–≥–æ–¥): {year:02d}\n"
                f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–µ 2 —Ü–∏—Ñ—Ä—ã (–º–µ—Å—è—Ü): {month:02d} ‚ùå\n"
                f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–µ 2 —Ü–∏—Ñ—Ä—ã (–¥–µ–Ω—å): {day:02d} ‚ùå\n\n"
                "üìù –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                "‚Ä¢ –ì–æ–¥ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ü–∏—Ñ—Ä—ã –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                "‚Ä¢ –ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 01 –¥–æ 12\n"
                "‚Ä¢ –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 01 –¥–æ 31\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è 15 –º–∞—Ä—Ç–∞ 1990 –≥–æ–¥–∞ –ø–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä –ò–ò–ù –±—É–¥—É—Ç: 900315\n\n"
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ò–ò–ù –ø–æ–≤—Ç–æ—Ä–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."
            )
            return
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if current_field == 'date':
        import re
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–¥.–º–º.–≥–≥–≥–≥
        if not re.match(r'^\d{2}\.\d{2}\.\d{4}$', message.text):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                "üìù –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990\n\n"
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ:"
            )
            return
        
        try:
            day, month, year = map(int, message.text.split('.'))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            if not (1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100):
                raise ValueError
        except ValueError:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!\n\n"
                "‚Ä¢ –î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 01 –¥–æ 31\n"
                "‚Ä¢ –ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 01 –¥–æ 12\n"
                "‚Ä¢ –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1900 –¥–æ 2025\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ:"
            )
            return
        text_to_save = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∫–∞–∫ –µ—Å—Ç—å
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º (–∫—Ä–æ–º–µ –ò–ò–ù –∏ –¥–∞—Ç—ã)
        text_to_save = message.text
        if message.text and current_field not in ['iin', 'date']:  # –ù–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –ò–ò–ù –∏ –¥–∞—Ç—É
            text_to_save = message.text.upper()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    await state.update_data({current_field: text_to_save})
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    updated_data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–µ–π
    changed_fields = await get_changed_fields_text(state)
    await message.answer(
        f"–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—è:\n{changed_fields}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':",
        reply_markup=get_fields_keyboard(updated_data)
    )
    await state.set_state(PDFData.selecting_fields)

@dp.callback_query(lambda c: c.data == "done", PDFData.selecting_fields)
async def process_done(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–æ–ª—è
    if not any(key in data for key in FIELDS.keys()):
        await callback.message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º MRZ
    if 'name' in data and 'surname' in data:
        mrz = generate_mrz(data['surname'], data['name'])
        await state.update_data(mrz=mrz)
        await callback.message.answer(f"MRZ —Å—Ç—Ä–æ–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n{mrz}")
    
    await callback.message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    await state.set_state(PDFData.waiting_for_pdf)
    await callback.answer()

def generate_mrz(surname: str, name: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MRZ —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏ —Ç–æ—á–Ω–æ –≤ 36 —Å–∏–º–≤–æ–ª–æ–≤.
    """
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã
    def transliterate(text: str) -> str:
        kazakh_russian_to_english = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'i', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'kh', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'shch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'iu', '—è': 'ia',
            # –ö–∞–∑–∞—Ö—Å–∫–∏–µ –±—É–∫–≤—ã
            '”ô': 'a', '—ñ': 'i', '“£': 'n', '“ì': 'g', '“Ø': 'u', '“±': 'u', 
            '“õ': 'k', '”©': 'o', '“ª': 'h', '–π': 'y'  # –∏–∑–º–µ–Ω–∏–ª–∏ '–π' –Ω–∞ 'y'
        }
        return ''.join(kazakh_russian_to_english.get(c.lower(), c) for c in text).upper()

    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
    eng_surname = transliterate(surname)
    eng_name = transliterate(name)
    
    # –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
    available_space = 36 - 2  # 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è <<
    max_surname_len = min(len(eng_surname), available_space // 2)
    max_name_len = available_space - max_surname_len
    
    eng_surname = eng_surname[:max_surname_len]
    eng_name = eng_name[:max_name_len]
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π MRZ —Å—Ç—Ä–æ–∫–∏
    mrz = f"{eng_surname}<<{eng_name}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã '<' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–≤–Ω–æ 36 —Å–∏–º–≤–æ–ª–æ–≤
    padding_needed = 36 - len(mrz)
    mrz = mrz + '<' * padding_needed
    
    return mrz  # –¢–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ 36 —Å–∏–º–≤–æ–ª–æ–≤

def get_selected_fields_message(data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    selected = []
    for field_id, field_name in FIELDS.items():
        if field_id in data:
            selected.append(f"{field_name}: {data[field_id]}")
    if 'mrz' in data:
        selected.append(f"MRZ: {data['mrz']}")
    return "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n" + "\n".join(selected)

@dp.message(PDFData.waiting_for_pdf)
async def handle_pdf(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    input_file = None
    output_file = None
    
    # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not message.document:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.')
        return
        
    if message.document.mime_type != 'application/pdf':
        await message.answer('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.')
        return
        
    if message.document.file_size and message.document.file_size > MAX_FILE_SIZE:
        await message.answer(
            f'–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {MAX_FILE_SIZE // (1024*1024)}MB. '
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.'
        )
        return
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ PDF –∏ –ø–∞—Ç—á–µ–π
    source_pdf = "source_pdf_path.pdf"
    if not os.path.exists(source_pdf):
        logger.error(f"–§–∞–π–ª {source_pdf} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer('–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—á–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    try:
        await ensure_patches_exist(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ç—á–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    unique_id = str(uuid.uuid4())
    input_file = os.path.join(UPLOAD_DIR, f"input_{unique_id}.pdf")
    output_pdf = os.path.join(UPLOAD_DIR, f"output_{unique_id}.pdf")
    output_png = os.path.join(UPLOAD_DIR, f"output_{unique_id}.png")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(UPLOAD_DIR, exist_ok=True)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fitz (PyMuPDF) –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ PNG
        try:
            import fitz
        except ImportError:
            await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
            await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyMuPDF...")
            import subprocess
            subprocess.check_call(["pip", "install", "PyMuPDF"])
            import fitz
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        try:
            data = await state.get_data()
            await message.answer('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...')
            await bot.download(message.document, destination=input_file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
        try:
            loop = asyncio.get_event_loop()
            def run_patch_custom():
                extractor = PatchExtractor(source_pdf_path="source_pdf_path.pdf")
                if hasattr(extractor, "process_pdf_custom"):
                    extractor.process_pdf_custom(input_file, output_pdf, data)
                else:
                    extractor.process_pdf(input_file, output_pdf)
                    
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ PNG
                pdf_document = fitz.open(output_pdf)
                page = pdf_document[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                pix = page.get_pixmap(matrix=fitz.Matrix(300/72, 300/72))  # –†–µ–Ω–¥–µ—Ä–∏–º —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º 300 DPI
                pix.save(output_png)
                pdf_document.close()
                    
            await loop.run_in_executor(None, run_patch_custom)
            await message.answer("PDF —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PNG")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if os.path.exists(output_pdf) and os.path.exists(output_png):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
                pdf_file = FSInputFile(output_pdf)
                await message.answer_document(pdf_file, caption='–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PNG
                png_file = FSInputFile(output_png)
                await message.answer_document(png_file, caption='–í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≤ PNG —Ñ–æ—Ä–º–∞—Ç–µ')
                
                await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤.")
        else:
            logger.error("–í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã.")
            
    except FileNotFoundError as e:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        await message.answer("–û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except PermissionError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            for file in [input_file, output_pdf, output_png]:
                if file and os.path.exists(file):
                    os.remove(file)
                    logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        await state.clear()

async def main():
    if not os.path.exists(UPLOAD_DIR):
        os.makedirs(UPLOAD_DIR)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await ensure_patches_exist(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(periodic_patches_update(bot))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
